# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateEmailInput {
  email: String!
  ownerId: String!
}

input AdminCreateIdentityInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input AdminCreateInviteInput {
  expiresAt: String
  maxUses: Int
  ownerId: String
}

input AdminCreateUserInput {
  password: String
  username: String!
}

input AdminFindEmailsInput {
  ownerId: String!
}

input AdminFindIdentitiesInput {
  ownerId: String!
}

input AdminFindInvitesInput {
  ownerId: String
  search: String
  skip: Int = 0
  take: Int = 10
}

input AdminFindNotificationsInput {
  owner: String
  search: String
  skip: Int = 0
  take: Int = 10
}

input AdminFindUsersInput {
  role: UserRole
  search: String
  skip: Int = 0
  status: UserStatus
  take: Int = 10
}

input AdminUpdateEmailInput {
  default: Boolean
  email: String
  private: Boolean
  verified: Boolean
}

input AdminUpdateInviteInput {
  expiresAt: DateTime
  maxUses: Int
}

input AdminUpdateUserInput {
  allowDm: Boolean
  avatarUrl: String
  developer: Boolean
  language: String
  location: String
  name: String
  role: UserRole
  status: UserStatus
  username: String
  verified: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Email {
  createdAt: DateTime!
  default: Boolean
  email: String!
  id: String!
  private: Boolean
  updatedAt: DateTime!
  verified: Boolean
}

type Identity {
  createdAt: DateTime!
  id: String!
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
}

enum IdentityProvider {
  GitHub
}

type Invite {
  code: String
  createdAt: DateTime!
  expiresAt: DateTime
  id: String!
  inviteUrl: String
  isExpired: Boolean
  isUsedUp: Boolean
  maxUses: Int
  owner: User
  updatedAt: DateTime!
  useCount: Int
  users: [User!]
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  adminCreateEmail(input: AdminCreateEmailInput!): Email
  adminCreateIdentity(input: AdminCreateIdentityInput!): Identity
  adminCreateInvite(input: AdminCreateInviteInput!): Invite
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteEmail(emailId: String!): Boolean
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteInvite(inviteId: String!): Invite
  adminDeleteNotification(notificationId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminUpdateEmail(emailId: String!, input: AdminUpdateEmailInput!): Email
  adminUpdateInvite(input: AdminUpdateInviteInput!, inviteId: String!): Invite
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  login(input: LoginInput!): User
  logout: Boolean
  register(input: RegisterInput!): User
  userAcceptInvite(code: String!): Invite
  userDeleteNotification(notificationId: String!): Boolean
  userPoke(pokeId: String!): Boolean
  userReadAllNotifications: Boolean
  userReadNotification(notificationId: String!): Boolean
  userUpdateUser(input: UserUpdateUserInput!): User
}

type Notification {
  actor: User
  createdAt: DateTime!
  id: String!
  message: String
  read: Boolean
  type: NotificationType
  updatedAt: DateTime!
}

enum NotificationType {
  Poke
  System
}

type Paging {
  count: Int
  skip: Int
  take: Int
  total: Int
}

type Query {
  adminFindEmails(input: AdminFindEmailsInput!): [Email!]
  adminFindIdentities(input: AdminFindIdentitiesInput!): [Identity!]
  adminFindInvites(input: AdminFindInvitesInput!): [Invite!]
  adminFindInvitesCount(input: AdminFindInvitesInput!): Paging
  adminFindNotifications(input: AdminFindNotificationsInput!): [Notification!]
  adminFindNotificationsCount(input: AdminFindNotificationsInput!): Paging
  adminFindUsers(input: AdminFindUsersInput!): [User!]
  adminFindUsersCount(input: AdminFindUsersInput!): Paging
  adminGetInvite(inviteId: String!): Invite
  adminGetUser(userId: String!): User
  anonGetInvite(code: String!): Invite
  me: User
  uptime: Float!
  userFindNotifications(input: UserFindNotificationsInput!): [Notification!]
  userFindNotificationsCount(input: UserFindNotificationsInput!): Paging
  userFindUsers(input: UserFindUsersInput!): [User!]
  userFindUsersCount(input: UserFindUsersInput!): Paging
  userGetInvite: Invite
  userGetInvites: [Invite!]
  userGetUserByUsername(username: String!): User
}

input RegisterInput {
  password: String!
  username: String!
}

type User {
  allowDm: Boolean
  avatarUrl: String
  createdAt: DateTime!
  developer: Boolean
  id: String!
  language: String
  location: String
  name: String
  role: UserRole!
  status: UserStatus!
  updatedAt: DateTime!
  username: String
  verified: Boolean
}

input UserFindNotificationsInput {
  search: String
  skip: Int = 0
  take: Int = 10
}

input UserFindUsersInput {
  search: String
  skip: Int = 0
  take: Int = 10
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUpdateUserInput {
  allowDm: Boolean
  avatarUrl: String
  developer: Boolean
  language: String
  location: String
  name: String
}
